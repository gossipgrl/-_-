# Полный ориентированный взвешенный граф задан матрицей смежности. Постройте матрицу кратчайших путей между его вершинами.
# Гарантируется, что в графе нет циклов отрицательного веса.

# Формат ввода
# В первой строке вводится единственное число N () — количество вершин графа. В следующих N строках по N чисел задается 
# матрица смежности графа (j-ое число в i-ой строке — вес ребра из вершины i в вершину j). Все числа по модулю не 
# превышают 100. На главной диагонали матрицы — всегда нули.

# Формат вывода
# Выведите N строк по N чисел — матрицу расстояний между парами вершин, где j-ое число в i-ой строке равно весу 
# кратчайшего пути из вершины i в j.

def shortest_paths(matrix, n):
    dist = [[0 if i == j else matrix[i][j] for j in range(n)] for i in range(n)]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

n = int(input())
matrix = [list(map(int, input().split())) for _ in range(n)]
result = shortest_paths(matrix, n)

for res in result:
    print(*res)
