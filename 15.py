# В городе работает несколько пунктов обмена валюты. Предположим, что каждый пункт производит обмен только между двумя валютами; 
# причём может существовать более, чем один обменный пункт, работающий с одной и той же парой валют. В каждом обменном пункте свои 
# курсы; курс валюты A к валюте B — это количество валюты B, которое вы получаете за одну единицу валюты A. Также в каждом обменном 
# пункте установлена комиссия — сумма, который вы платите за операцию обмена. Комиссия всегда взымается в валюте, которая обменивается.
# Например, если вы планируете обменять 100 байтландских тугриков на берляндские бурли в обменном пункте, в котором курс равен 29.75, 
# а комиссия равна 0.39, вы получите (100-0.39) ⋅ 29.75 = 2963.3975 берляндских бурлей. Всего в городе работают с N валютами. 
# Присвоим каждой валюте номер от 1 до N. Тогда каждый обменный пункт может быть описан 6 числами: целые числа A и B — номера валют, 
# с которыми он работает и вещественные числа RAB, CAB, RBA и CBA – обменные курсы и комиссия при обмене A на B и B на A соответственно.
# У лося Валеры есть некоторая сумма в валюте S и он интересуется, может ли он провести несколько обменных операций и в итоге увеличить 
# свой капитал (оставшись при этом в валюте S). Помогите ему ответить на его вопрос. Заметим, что в минус лось уходить не может.

# Формат ввода
# Первая строка входных данных содержат четыре целых числа: N – общее количество валют, M – количество обменных пунктов, S – тип валюты, 
# которая есть у лося Валеры и V – количество этой валюты. Каждая из последующих M строк содержит по 6 целых чисел — описание 
# соответствующего пункта обмена в указанном выше порядке. Числа разделены одним или несколькими пробелами. 1 ≤ S ≤ N ≤ 100, 1 ≤ M ≤ 100, 
# V — вещественное число, 0 ≤ V ≤ 103. Для каждого обменного пункта курсы обмена и комиссия вещественны и заданы не более, чем с двумя 
# знаками после десятичной точки. 10-2 ≤ rate ≤ 102, 0 ≤ commission ≤ 102. Назовём последовательность обменных операций простой, 
# если ни один обменный пункт не используется в этой последовательности дважды. Гарантируется, что отношение численных значений 
# денежных сумм в начале и в конце каждой последовательности обменных операций не превосходит 104.

# Формат вывода
# Если лось может увеличить свой капитал, выведите “YES”. Иначе выведите “NO”.

def find_arbitrage_opportunity(n, s, v, exchanges):
    distance = [0] * n
    distance[s - 1] = v

    for _ in range(n - 1):
        for a, b, rab, cab, rba, cba in exchanges:
            a, b = int(a), int(b)
            if distance[a - 1] > 0:
                new_distance = (distance[a - 1] - cab) * rab
                distance[b - 1] = max(distance[b - 1], new_distance)
            if distance[b - 1] > 0:
                new_distance = (distance[b - 1] - cba) * rba
                distance[a - 1] = max(distance[a - 1], new_distance)

    for a, b, rab, cab, rba, cba in exchanges:
        a, b = int(a), int(b)
        if distance[a - 1] > 0 and (distance[a - 1] - cab) * rab > distance[b - 1]:
            return "YES"
        if distance[b - 1] > 0 and (distance[b - 1] - cba) * rba > distance[a - 1]:
            return "YES"

    return "NO"

n, m, s, v = map(float, input().split())
n, m, s = int(n), int(m), int(s)
exchanges = [list(map(float, input().split())) for _ in range(m)]

print(find_arbitrage_opportunity(n, s, v, exchanges))
